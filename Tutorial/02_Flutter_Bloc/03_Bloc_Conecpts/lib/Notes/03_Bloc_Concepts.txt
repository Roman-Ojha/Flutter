*) Flutter Bloc Concepts:
    -> Some Vital Flutter concepts to get going (widget, widget tree)
        1) BlocProvider
        2) BlocBuilder
        3) BlocListener
        4) BlocConsumer
        5) MultiBlocListener, MultiBlocProvider, MultiRepositoryProvider

=> In Flutter Bloc concepts every concept is A Widget

*) Widget in flutter:
    -> Classes

*) BlocProvider:
    -> So there is no any CubitProvider because cubit is a small part of the bloc 'BlocProvider' will work same for the Cubit as well
    -> Hence, every concept Above Define are available for both Bloc and Cubit
    -> BlocProvider is a Flutter widget which create and provide a bloc to all of it's children
    -> BlocProvider will Provide a Single Instance of a Bloc to the Subtree Blow
    -> BlocProvider(
        create:(BuildContext context)=> BlocA();
        child: ChildA(),
    )
        -> BuildContext is a context in which a Specific Widget is build
        -> here 'BlocA' is the Instance that is provided by the bloc to the subtree
    -> To Access:
        -> BlocProvider.of<BlocA>(context); or
        -> context.bloc<BlocA)()
    -> by Default, BlocProvider create the bloc lazily to override this behavior:
        -> BlocProvider(
            lazy:false
            create:(BuildContext context)=> BlocA();
            child: ChildA(),
        )
    -> BlocProvider handles the closing part of blocs automatically
    -> https://youtu.be/THCkkQ-V1-8?t=2105
    -> 

*) BlocBuilder:
    -> BlocBuilder is a Widget that helps Re-Building the UI based on bloc State Change
    -> NOTE that Rebuilding a Large Chunk of the UI may Require a Lot of Time to Compute so that why a good practice is to wrap the exact part of UI that you want to rebuild inside bloc builder 
    -> BlocBuilder<BlocA,BlocAState>{
        builder:(context,state){
            // return widget here based on BlocA's state
        }
        buildWhen:(previousState,state){
            // return true/false to determine where or not to build the widget with state
            // 'state' is the current state
            // Ex: in this project if (previousState.value < state.value) return false 
        }
    }

*) BlocListener:
    -> The builder function can be called multiple times.
    -> Navigating to another screen can't be able to do inside the BlocBuilder
    -> BlocListener is the widget which listen to any state change 
    -> instead of rebuilding the widget as BlocBuilder did with the builder function BlocListener takes simple void function called 'listener' which is called only one per state not Including the initial state
    -> BlocListener<BlocA,BlocAState>(
        listener:(context,state){
            // Do stuff here based on BlocA's state
        },
        child: Container(),
    )

*) BlocConsumer:
    -> BlocConsumer is a widget which combine both BlocListener and BlocBuilder into a single widget
    -> This had been implement inside the 'bloc_consumer.dart'